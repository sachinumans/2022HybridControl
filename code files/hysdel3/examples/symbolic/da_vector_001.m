S = [];
S.A = [1, 0;
0, 1;
];
S.Bu = [1;
1;
];
S.Baux = [1, 0, 0, 0, 0, 0;
1, 0, 0, 0, 0, 0;
];
S.Baff = [0;
0;
];
S.C = [1, 0;
0, 1;
];
S.Du = [0;
0;
];
S.Daux = [0, 0, 0, 0, 0, 0;
0, 0, 0, 0, 0, 0;
];
S.Daff = [0;
0;
];
S.Ex = [-1, 0;
0, -1;
1, 0;
0, 1;
0, 0;
0, 0;
0, 0;
0, 0;
1, 0;
0, 1;
0, 0;
0, 0;
0, 0;
0, 0;
0, 0;
0, 0;
1, 0;
0, 1;
-1, 0;
0, -1;
-1, 0;
0, -1;
1, 0;
0, 1;
0, 0;
0, 0;
0, 0;
0, 0;
0, 0;
];
S.Eu = [0;
0;
0;
0;
-1;
1;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
0;
];
S.Eaux = [0, 0, 0, 0, 0, 0;
0, 0, 0, 0, 0, 0;
0, 0, 0, 0, 0, 0;
0, 0, 0, 0, 0, 0;
0, 0, 0, 0, 0, 0;
0, 0, 0, 0, 0, 0;
-1, 0, 0, 0, 0, 0;
1, 0, 0, 0, 0, 0;
0, 0, 0, 0, 0, 0;
0, 0, 0, 0, 0, 0;
-1, 0, 0, 0, 0, 0;
1, 0, 0, 0, 0, 0;
-1, 0, 0, 0, 0, 0;
1, 2, 0, 0, 0, 0;
-1, -2, 0, 0, 0, 0;
1, 0, 0, 0, 0, 0;
0, max( -10000+-1*x1u,15+-1*x1u ), 0, 0, 0, 0;
0, max( -10000+-1*x2u,15+-1*x2u ), 0, 0, 0, 0;
0, max( 10000+x1d,-15+x1d ), 0, 0, 0, 0;
0, max( 10000+x2d,-15+x2d ), 0, 0, 0, 0;
0, 0, -0.0001+min( -10000+-1*x1u,15+-1*x1u ), 0, 0, 0;
0, 0, 0, -0.0001+min( -10000+-1*x2u,15+-1*x2u ), 0, 0;
0, 0, 0, 0, -0.0001+min( 10000+x1d,-15+x1d ), 0;
0, 0, 0, 0, 0, -0.0001+min( 10000+x2d,-15+x2d );
0, -1, 1, 1, 1, 1;
0, 1, -1, 0, 0, 0;
0, 1, 0, -1, 0, 0;
0, 1, 0, 0, -1, 0;
0, 1, 0, 0, 0, -1;
];
S.Eaff = [10*x1u;
10*x1u;
10+x2u*x2d;
10+x2u*x2d;
10;
10;
10000;
10000;
15;
15;
-0.5;
2.5;
-0.5;
2.5;
-2.5;
2.5;
x1u+max( -10000+-1*x1u,15+-1*x1u );
x2u+max( -10000+-1*x2u,15+-1*x2u );
-1*x1d+max( 10000+x1d,-15+x1d );
-1*x2d+max( 10000+x2d,-15+x2d );
-0.0001+-1*x1u;
-0.0001+-1*x2u;
-0.0001+x1d;
-0.0001+x2d;
3;
0;
0;
0;
0;
];
S.nu = 1;
S.nx = 2;
S.ny = 2;
S.nw = 6;
S.InputName = {'u'};
S.InputKind = {'r'};
S.InputLength = {1};
S.StateName = {'x'};
S.StateKind = {'r'};
S.StateLength = {2};
S.OutputName = {'y'};
S.OutputKind = {'r'};
S.OutputLength = {2};
S.AuxName = {'z', 'd_additional_1', 'd_additional_2', 'd_additional_3', 'd_additional_4', 'd_additional_5'};
S.AuxKind = {'r', 'b', 'b', 'b', 'b', 'b'};
S.AuxLength = {1, 1, 1, 1, 1, 1};
S.ParameterName = {'x1u', 'x2u', 'x1d', 'x2d'};
S.ParameterKind = {};
S.ParameterLength = {1, 1, 1, 1};
S.xl = [-Inf;-Inf];
S.xu = [15;15];
S.ul = -10;
S.uu = 10;
S.yl = [-10000;-10000];
S.yu = [10000;10000];
S.wl = [0.5;0;0;0;0;0];
S.wu = [2.5;1;1;1;1;1];
S.j.xr = [1;2];
S.j.xb = [];
S.j.ur = 1;
S.j.ub = [];
S.j.yr = [1;2];
S.j.yb = [];
S.j.d = [2;3;4;5;6];
S.j.z = 1;
S.j.w_auto_bin = [2 3 4 5 6];
S.j.eq = zeros(1,0);
S.j.ineq = [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29];
S.J.X = 'rr';
S.J.U = 'r';
S.J.Y = 'rr';
S.J.W = 'rbbbbb';
S.nxb = 0;
S.nxr = 2;
S.nub = 0;
S.nur = 1;
S.nyb = 0;
S.nyr = 2;
S.nd = 5;
S.nz = 1;
S.nc = 29;
S.symtable = {struct('name', 'x1u', 'orig_type', 'parameter', 'type', 'parameter', 'kind', 'real'), struct('name', 'x2u', 'orig_type', 'parameter', 'type', 'parameter', 'kind', 'real'), struct('name', 'x1d', 'orig_type', 'parameter', 'type', 'parameter', 'kind', 'real'), struct('name', 'x2d', 'orig_type', 'parameter', 'type', 'parameter', 'kind', 'real'), struct('name', 'H', 'orig_type', 'parameter', 'type', 'parameter', 'kind', 'real'), struct('name', 'K', 'orig_type', 'parameter', 'type', 'parameter', 'kind', 'real'), struct('name', 'x', 'orig_type', 'state', 'type', 'state', 'kind', 'real'), struct('name', 'u', 'orig_type', 'input', 'type', 'input', 'kind', 'real'), struct('name', 'y', 'orig_type', 'output', 'type', 'output', 'kind', 'real'), struct('name', 'z', 'orig_type', 'aux', 'type', 'aux', 'kind', 'real')};
S.MLDisvalid = 1;
S.connections.variables = [];
S.connections.table = [];
S.name = 'da_vector_001';
