S = [];
S.A = [1, 1, 0;
0, 1, 0;
0, 0, 1;
];
S.Bu = [0, 0;
0, 0;
0, -1;
];
S.Baux = [1;
v_acc;
0;
];
S.Baff = [0;
0;
0;
];
S.C = [1, 0, 0;
];
S.Du = [0, 0;
];
S.Daux = [0;
];
S.Daff = [0;
];
S.Ex = [-1, 0, 0;
1, 0, 0;
0, -1, 0;
0, 1, 0;
0, 0, -1;
0, 0, 1;
0, 0, 0;
0, 0, 0;
0, 0, 0;
0, 0, 0;
0, 0, 0;
0, 0, 0;
0, 0, 0;
0, 0, 0;
];
S.Eu = [0, 0;
0, 0;
0, 0;
0, 0;
0, 0;
0, 0;
-1, 0;
1, 0;
0, 0;
0, 0;
a_acc, max( -10000+a_acc,max( 10000+-1*a_acc,max( 10000+-1*a_acc,-10000+a_acc ) ) );
-1*a_acc, -1*max( -10000+a_acc,max( 10000+-1*a_acc,max( 10000+-1*a_acc,-10000+a_acc ) ) );
1, -10001;
-1, -10001;
];
S.Eaux = [0;
0;
0;
0;
0;
0;
0;
0;
-1;
1;
-1;
1;
-1;
1;
];
S.Eaff = [50;
50;
10;
10;
0;
5;
1;
1;
10000;
10000;
max( -10000+a_acc,max( 10000+-1*a_acc,max( 10000+-1*a_acc,-10000+a_acc ) ) );
-1*max( -10000+a_acc,max( 10000+-1*a_acc,max( 10000+-1*a_acc,-10000+a_acc ) ) );
0;
0;
];
S.nu = 2;
S.nx = 3;
S.ny = 1;
S.nw = 1;
S.InputName = {'acc', 'turbo'};
S.InputKind = {'r', 'b'};
S.InputLength = {1, 1};
S.StateName = {'position', 'velocity', 'turbocount'};
S.StateKind = {'r', 'r', 'r'};
S.StateLength = {1, 1, 1};
S.OutputName = {'y'};
S.OutputKind = {'r'};
S.OutputLength = {1};
S.AuxName = {'aux_acc'};
S.AuxKind = {'r'};
S.AuxLength = {1};
S.ParameterName = {'a_acc', 'v_acc'};
S.ParameterKind = {};
S.ParameterLength = {1, 1};
S.xl = [-50;-10;-0];
S.xu = [50;10;5];
S.ul = [-1;0];
S.uu = [1;1];
S.yl = -10000;
S.yu = 10000;
S.wl = -10000;
S.wu = 10000;
S.j.xr = [1;2;3];
S.j.xb = [];
S.j.ur = 1;
S.j.ub = 2;
S.j.yr = 1;
S.j.yb = [];
S.j.d = [];
S.j.z = 1;
S.j.w_auto_bin = [];
S.j.eq = zeros(1,0);
S.j.ineq = [1 2 3 4 5 6 7 8 9 10 11 12 13 14];
S.J.X = 'rrr';
S.J.U = 'rb';
S.J.Y = 'r';
S.J.W = 'r';
S.nxb = 0;
S.nxr = 3;
S.nub = 1;
S.nur = 1;
S.nyb = 0;
S.nyr = 1;
S.nd = 0;
S.nz = 1;
S.nc = 14;
S.symtable = {struct('name', 'a_acc', 'orig_type', 'parameter', 'type', 'parameter', 'kind', 'real'), struct('name', 'v_acc', 'orig_type', 'parameter', 'type', 'parameter', 'kind', 'real'), struct('name', 'position', 'orig_type', 'state', 'type', 'state', 'kind', 'real'), struct('name', 'velocity', 'orig_type', 'state', 'type', 'state', 'kind', 'real'), struct('name', 'turbocount', 'orig_type', 'state', 'type', 'state', 'kind', 'real'), struct('name', 'acc', 'orig_type', 'input', 'type', 'input', 'kind', 'real'), struct('name', 'turbo', 'orig_type', 'input', 'type', 'input', 'kind', 'bool'), struct('name', 'y', 'orig_type', 'output', 'type', 'output', 'kind', 'real'), struct('name', 'aux_acc', 'orig_type', 'aux', 'type', 'aux', 'kind', 'real')};
S.MLDisvalid = 1;
S.connections.variables = [];
S.connections.table = [];
S.name = 'turbo_car';
