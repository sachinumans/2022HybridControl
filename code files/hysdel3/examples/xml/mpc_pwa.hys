SYSTEM mpc_pwa {
/* MPC for the famous sin-cos PWA system */
  INTERFACE {
    STATE {
      REAL X(nx, 1) [-10, 10];  /* initial state, nx-by-1 vector */
    }
    INPUT {
      REAL U(nu, N) [-1, 1]; /* N-1 dimensional matrix of system inputs */
    }
    OUTPUT {
      REAL y; /* system output, identical to 1st element of last state */
    }
    PARAMETER {
      REAL N = 5; /* prediction horizon */
      REAL nx = 2, nu = 1;  /* number of states, number of inputs */
      
      /* matrices of system dynamics */
      REAL A1 = [0.4, 0.6928; -0.6928, 0.4], A2 = [0.4, -0.6928; 0.6928, 0.4];
      REAL B(2,1) = [0; 1];
    }
  }
  IMPLEMENTATION {
    AUX {
      REAL z(nx, N+1);       /* N-by-nx matrix, corresponds to X_0, X_1, ..., X_N */
      BOOL negative(N);  /* N-1 dimensional vector of delta variables */
      INDEX i;             /* index variable */
    }
    LINEAR {
      z(1:nx, 1) = X(1:nx);   /* set z(:, 1) = X_0 */
    }
    AD {
        /* negative_1 = z(1, 1) <= 0, 
           negative_2 = z(1, 2) <= 0,
           negative_3 = z(1, 3) <= 0,
           ...
           negative_(N-1) = z(1, N-1) <= 0
        */
        FOR (i = 1:N) {
           negative(i) = z(1, i) <= 0;
        }
    }
    DA {
        /* PWA dynamics. x(k+1) = A1*x(k) + B*u(k) if "negative(k)" is true,
           otherwise     x(k+1) = A2*x(k) + B*u(k)
        */
        FOR (i = 1:N) { 
          z(1:nx, i+1) = {IF negative(i) THEN A1*z(1:nx, i) + B*U(1:nu, i)
              ELSE A2*z(1:nx, i) + B*U(1:nu, i)};
        }
    }
    CONTINUOUS {
      /* next state update corresponds to last predicted state, i.e. to X_N */
      X = z(1:nx, N+1);
    }
    OUTPUT {
      /* system output is the 1st element of the last predicted state */
      y = X(1);
    }
    MUST {
      /* all elements of every predicted state constrained between +10 and -10 */
      z <= 10;
      z >= -10;
    }
  }
}
